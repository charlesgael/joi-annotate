import type { StringSchema } from 'joi'

export * from './any.op'

export const alphanum = (...args: Parameters<StringSchema['alphanum']>) => ({ alphanum: args })
export const base64 = (...args: Parameters<StringSchema['base64']>) => ({ base64: args })
export const case_ = (...args: Parameters<StringSchema['case']>) => ({ case: args })
export const creditCard = (...args: Parameters<StringSchema['creditCard']>) => ({ creditCard: args })
export const dataUri = (...args: Parameters<StringSchema['dataUri']>) => ({ dataUri: args })
export const domain = (...args: Parameters<StringSchema['domain']>) => ({ domain: args })
export const email = (...args: Parameters<StringSchema['email']>) => ({ email: args })
export const guid = (...args: Parameters<StringSchema['guid']>) => ({ guid: args })
export const uuid = (...args: Parameters<StringSchema['uuid']>) => ({ uuid: args })
export const hex = (...args: Parameters<StringSchema['hex']>) => ({ hex: args })
export const hostname = (...args: Parameters<StringSchema['hostname']>) => ({ hostname: args })
export const insensitive = (...args: Parameters<StringSchema['insensitive']>) => ({ insensitive: args })
export const ip = (...args: Parameters<StringSchema['ip']>) => ({ ip: args })
export const isoDate = (...args: Parameters<StringSchema['isoDate']>) => ({ isoDate: args })
export const isoDuration = (...args: Parameters<StringSchema['isoDuration']>) => ({ isoDuration: args })
export const length = (...args: Parameters<StringSchema['length']>) => ({ length: args })
export const lowercase = (...args: Parameters<StringSchema['lowercase']>) => ({ lowercase: args })
export const max = (...args: Parameters<StringSchema['max']>) => ({ max: args })
export const min = (...args: Parameters<StringSchema['min']>) => ({ min: args })
export const normalize = (...args: Parameters<StringSchema['normalize']>) => ({ normalize: args })
export const pattern = (...args: Parameters<StringSchema['pattern']>) => ({ pattern: args })
export const regex = (...args: Parameters<StringSchema['regex']>) => ({ regex: args })
export const replace = (...args: Parameters<StringSchema['replace']>) => ({ replace: args })
export const token = (...args: Parameters<StringSchema['token']>) => ({ token: args })
export const trim = (...args: Parameters<StringSchema['trim']>) => ({ trim: args })
export const truncate = (...args: Parameters<StringSchema['truncate']>) => ({ truncate: args })
export const uppercase = (...args: Parameters<StringSchema['uppercase']>) => ({ uppercase: args })
export const uri = (...args: Parameters<StringSchema['uri']>) => ({ uri: args })
