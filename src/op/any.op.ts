import type { AnySchema } from 'joi'

export const allow = (...args: Parameters<AnySchema['allow']>) => ({ allow: args })
export const alter = (...args: Parameters<AnySchema['alter']>) => ({ alter: args })
export const artifact = (...args: Parameters<AnySchema['artifact']>) => ({ artifact: args })
export const cache = (...args: Parameters<AnySchema['cache']>) => ({ cache: args })
export const cast = (...args: Parameters<AnySchema['cast']>) => ({ cast: args })
export const concat = (...args: Parameters<AnySchema['concat']>) => ({ concat: args })
export const custom = (...args: Parameters<AnySchema['custom']>) => ({ custom: args })
export const default_ = (...args: Parameters<AnySchema['default']>) => ({ default: args })
export const describe = (...args: Parameters<AnySchema['describe']>) => ({ describe: args })
export const description = (...args: Parameters<AnySchema['description']>) => ({ description: args })
export const empty = (...args: Parameters<AnySchema['empty']>) => ({ empty: args })
export const error = (...args: Parameters<AnySchema['error']>) => ({ error: args })
export const example = (...args: Parameters<AnySchema['example']>) => ({ example: args })
export const external = (...args: Parameters<AnySchema['external']>) => ({ external: args })
export const extract = (...args: Parameters<AnySchema['extract']>) => ({ extract: args })
export const failover = (...args: Parameters<AnySchema['failover']>) => ({ failover: args })
export const forbidden = (...args: Parameters<AnySchema['forbidden']>) => ({ forbidden: args })
export const fork = (...args: Parameters<AnySchema['fork']>) => ({ fork: args })
export const id = (...args: Parameters<AnySchema['id']>) => ({ id: args })
export const invalid = (...args: Parameters<AnySchema['invalid']>) => ({ invalid: args })
export const keep = (...args: Parameters<AnySchema['keep']>) => ({ keep: args })
export const label = (...args: Parameters<AnySchema['label']>) => ({ label: args })
export const message = (...args: Parameters<AnySchema['message']>) => ({ message: args })
export const messages = (...args: Parameters<AnySchema['messages']>) => ({ messages: args })
export const meta = (...args: Parameters<AnySchema['meta']>) => ({ meta: args })
export const note = (...args: Parameters<AnySchema['note']>) => ({ note: args })
export const only = (...args: Parameters<AnySchema['only']>) => ({ only: args })
export const optional = (...args: Parameters<AnySchema['optional']>) => ({ optional: args })
export const prefs = (...args: Parameters<AnySchema['prefs']>) => ({ prefs: args })
export const presence = (...args: Parameters<AnySchema['presence']>) => ({ presence: args })
export const raw = (...args: Parameters<AnySchema['raw']>) => ({ raw: args })
export const required = (...args: Parameters<AnySchema['required']>) => ({ required: args })
export const rule = (...args: Parameters<AnySchema['rule']>) => ({ rule: args })
export const shared = (...args: Parameters<AnySchema['shared']>) => ({ shared: args })
export const strict = (...args: Parameters<AnySchema['strict']>) => ({ strict: args })
export const strip = (...args: Parameters<AnySchema['strip']>) => ({ strip: args })
export const tag = (...args: Parameters<AnySchema['tag']>) => ({ tag: args })
export const tailor = (...args: Parameters<AnySchema['tailor']>) => ({ tailor: args })
export const unit = (...args: Parameters<AnySchema['unit']>) => ({ unit: args })
export const valid = (...args: Parameters<AnySchema['valid']>) => ({ valid: args })
export const validate = (...args: Parameters<AnySchema['validate']>) => ({ validate: args })
export const validateAsync = (...args: Parameters<AnySchema['validateAsync']>) => ({ validateAsync: args })
export const warn = (...args: Parameters<AnySchema['warn']>) => ({ warn: args })
export const warning = (...args: Parameters<AnySchema['warning']>) => ({ warning: args })
export const when = (...args: Parameters<AnySchema['when']>) => ({ when: args })
